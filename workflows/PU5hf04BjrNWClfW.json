{"createdAt":"2025-08-12T08:20:53.460Z","updatedAt":"2025-09-20T13:51:43.691Z","id":"PU5hf04BjrNWClfW","name":"Search BunkerWeb through Reddit","active":true,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{"triggerAtHour":12}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-2064,-176],"id":"ebf3dc33-11af-4dac-92df-8d36b29c4e2d","name":"Every day"},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-2064,720],"id":"887278bf-150b-44c4-bfbb-98723d6fcdb4","name":"Clear processed IDs"},{"parameters":{"resource":"postComment","operation":"getAll","subreddit":"={{ $json.post_subreddit }}","postId":"={{ $json.post_id }}","returnAll":true},"type":"n8n-nodes-base.reddit","typeVersion":1,"position":[-944,176],"id":"d6d92512-9a62-43d3-abb4-7fe7dc155c72","name":"Get all comments in a post","credentials":{"redditOAuth2Api":{"id":"QR3rur3Cy4Zpsvrk","name":"Reddit account"}}},{"parameters":{"operation":"search","location":"allReddit","keyword":"\"BunkerWeb\"","additionalFields":{}},"type":"n8n-nodes-base.reddit","typeVersion":1,"position":[-1840,-176],"id":"78146e3e-ab25-419c-b9b0-3926162aa352","name":"Search the last 100 posts containing the BunkerWeb keyword","credentials":{"redditOAuth2Api":{"id":"QR3rur3Cy4Zpsvrk","name":"Reddit account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":false,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d21f2ff5-29dc-43ca-baf4-910f57688c06","leftValue":"={{ $json.created_utc.toDateTime('s') }}","rightValue":"={{ $now.format('yyyy-MM-dd').toDateTime().minus(1, \"year\").toUTC() }}","operator":{"type":"dateTime","operation":"afterOrEquals"}}],"combinator":"and"},"options":{"ignoreCase":true}},"type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[-1616,32],"id":"c72daa60-f255-4e01-8ebe-0de2a0860053","name":"Filter last year's posts"},{"parameters":{"conditions":{"options":{"caseSensitive":false,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"ab9166a7-8a2d-43e6-b94e-fa62d52e8090","leftValue":"={{ $json.post_body }}","rightValue":"BunkerWeb","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"options":{"ignoreCase":true}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-1168,-80],"id":"3525c379-e0b8-44a6-9eac-1994e4df34db","name":"If Contains BunkerWeb"},{"parameters":{"jsCode":"// Normalize to an array of top-level comment objects (plain Reddit \"t1\" data)\nfunction getRootComments(items) {\n  const out = [];\n  const first = items?.[0]?.json;\n  if (!first) return out;\n\n  // Case 1: items[0].json is an array (may contain plain data or {data})\n  if (Array.isArray(first)) {\n    for (let i = 0; i < first.length; i++) {\n      const c = first[i];\n      out.push(c?.data?.body !== undefined ? c.data : c);\n    }\n    return out;\n  }\n\n  // Case 2: items[0].json is a Listing\n  const children = first?.data?.children;\n  if (children && children.length) {\n    for (let i = 0; i < children.length; i++) {\n      const c = children[i];\n      if (c && c.kind === 't1' && c.data) out.push(c.data);\n    }\n    return out;\n  }\n\n  // Case 3: each item.json is a single comment-ish object\n  for (let i = 0; i < items.length; i++) {\n    const j = items[i]?.json;\n    if (!j || typeof j !== 'object') continue;\n    out.push(j?.data?.body !== undefined ? j.data : j);\n  }\n  return out;\n}\n\n// Extract children from any replies shape without temp arrays\nfunction getChildrenFromReplies(replies) {\n  if (!replies || typeof replies === 'string') return null; // \"\" => no replies\n  let children = replies.data?.children;\n  if (!children || !children.length) children = replies.children;\n  if (!children || !children.length) return null;\n\n  const out = [];\n  for (let i = 0; i < children.length; i++) {\n    const c = children[i];\n    if (c && c.kind === 't1' && c.data) out.push(c.data);\n  }\n  return out.length ? out : null;\n}\n\n// DFS with de-dup by id; match only raw body (case-insensitive)\nfunction findMatchesDeep(roots, keywordLC) {\n  const matches = [];\n  const seen = new Set();\n  const stack = roots.slice(); // shallow copy\n\n  while (stack.length) {\n    const node = stack.pop();\n    if (!node || typeof node !== 'object') continue;\n\n    const id = node.id || node.name || node.permalink;\n    if (id && seen.has(id)) continue;\n    if (id) seen.add(id);\n\n    const body = node.body;\n    if (typeof body === 'string' && body.toLowerCase().includes(keywordLC)) {\n      matches.push(node);\n    }\n\n    const kids = getChildrenFromReplies(node.replies);\n    if (kids) {\n      for (let i = 0; i < kids.length; i++) stack.push(kids[i]);\n    }\n  }\n\n  return matches;\n}\n\nconst keywordLC = 'bunkerweb';\nconst rootComments = getRootComments($input.all());\nconst matches = findMatchesDeep(rootComments, keywordLC);\n\nif (!matches.length) {\n  return [{ json: { matches: 0, containsBunkerWeb: false } }];\n}\n\n// Optional: stable chronological order with a cheap comparator\nmatches.sort((a, b) => (a.created_utc || 0) - (b.created_utc || 0));\n\nreturn matches.map(c => ({\n  json: {\n    id: c.id,\n    comment_author: c.author,\n    comment_body: c.body,           // raw body only\n    permalink: c.permalink,\n    created_utc: c.created_utc,\n    comment_parent_id: c.parent_id.includes(\"_\") \n  ? c.parent_id.split(/_(.+)/)[1] \n  : c.parent_id\n  },\n}));\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-720,176],"id":"38b1dba0-205e-4893-8f3f-3817545306f1","name":"Extract comments from post"},{"parameters":{"sortFieldsUi":{"sortField":[{"fieldName":"created_utc"}]},"options":{}},"type":"n8n-nodes-base.sort","typeVersion":1,"position":[1968,-288],"id":"8d68f0fd-17d4-437d-8d71-655c29d9b1ef","name":"Sort by creation date"},{"parameters":{"jsCode":"const rows = $input.all().map(i => i.json);\n\n// Keys from the post to copy over\nconst postKeys = [\n  \"post_title\",\n  \"post_body\",\n  \"post_permalink\",\n  \"post_subreddit\",\n  \"post_thumbnail\",\n  \"post_author\",\n  \"created_utc\",\n  \"post_over_18\"\n];\n\n// Create lookup of posts by post_id\nconst postById = Object.fromEntries(\n  rows.filter(r => r.post_id).map(p => [p.post_id, p])\n);\n\n// Return only merged comment objects with matching parent post\nreturn rows\n  .filter(r => r.comment_parent_id && postById[r.comment_parent_id])\n  .map(r => {\n    const post = postById[r.comment_parent_id];\n    const merged = {};\n\n    // Copy only allowed keys from post\n    for (const key of postKeys) {\n      merged[key] = post[key] ?? null;\n    }\n\n    // Add the comment fields\n    Object.assign(merged, r);\n\n    return { json: merged };\n  });\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-272,32],"id":"cb5a6a38-50da-41bf-aa8b-10266ccbf898","name":"Merge posts / comments"},{"parameters":{"assignments":{"assignments":[{"id":"0ee82772-bf3a-40b9-95c6-179fd37213e7","name":"id","value":"=comment_{{ $json.id }}","type":"string"}]},"includeOtherFields":true,"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-48,32],"id":"42c94447-4669-4fc2-a9eb-1c18e8aa6655","name":"Prefix comment ID"},{"parameters":{"jsCode":"return $input.all().map((item) => {\n  const e = item.json;\n\n  // Build post_body\n  let post_body = \"\";\n  if (e.selftext && e.selftext.trim() !== \"\") {\n    post_body = e.selftext;\n    if (e.url_overridden_by_dest && e.url_overridden_by_dest.trim() !== \"\") {\n      post_body += `\\nURL: ${e.url_overridden_by_dest}`;\n    }\n  } else {\n    post_body = e.url_overridden_by_dest || \"\";\n  }\n\n  // Helper: extract direct image\n  const getDirectImage = (post) => {\n    // Case 1: direct Reddit image link\n    if (post?.is_reddit_media_domain && post?.post_hint === \"image\" && post?.url?.match(/\\.(jpg|jpeg|png|gif)$/i)) {\n      return post.url;\n    }\n\n    // Case 2: preview image\n    if (post?.preview?.images?.[0]?.source?.url) {\n      return post.preview.images[0].source.url.replace(/&amp;/g, \"&\");\n    }\n\n    // Case 3: gallery\n    if (post?.is_gallery && post?.media_metadata) {\n      const firstMedia = Object.values(post.media_metadata)[0];\n      if (firstMedia?.s?.u) {\n        return firstMedia.s.u.replace(/&amp;/g, \"&\");\n      }\n    }\n\n    return null;\n  };\n\n  // Try to get the image from post or crosspost\n  let imageUrl =\n    getDirectImage(e) ||\n    (e.crosspost_parent_list?.length ? getDirectImage(e.crosspost_parent_list[0]) : null);\n\n  return {\n    json: {\n      post_id: e.id || null,\n      post_title: e.title || \"\",\n      post_body,\n      post_permalink: e.permalink || \"\",\n      post_subreddit: e.subreddit || \"\",\n      post_thumbnail: imageUrl || \"\",\n      post_author: e.author || \"\",\n      created_utc: e.created_utc || \"\",\n      post_over_18: e.over_18 || false,\n      comment_author: null,\n      comment_body: null\n    },\n  };\n});\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1392,-80],"id":"f407bf29-bd2c-4ef8-a7cf-0fec864c5c31","name":"Format post data"},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[-496,32],"id":"fbf5a298-ab9c-4efb-8b38-b9dd761ff198","name":"Merge posts and comments"},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1520,-384],"id":"357dedf9-e818-4117-a8db-63e0e4a773ee","name":"Merge summary"},{"parameters":{"authentication":"webhook","options":{"wait":true},"embeds":{"values":[{"description":"={{ $json.summary }}\\n\\nFrom subreddit: /r/{{ $json.post_subreddit }}","author":"={{ $json.comment_author ? $json.comment_author: $json.post_author }}","color":" #FF5700 ","timestamp":"={{ DateTime.fromSeconds($json.created_utc).setZone('UTC') }}","title":"🤖 New reddit mention!","url":"=https://www.reddit.com{{ $json.post_permalink }}","thumbnail":"={{ $json.comment_thumbnail ? $json.comment_thumbnail : ($json.post_thumbnail ? $json.post_thumbnail: $json.comment_thumbnail) }}"}]}},"type":"n8n-nodes-base.discord","typeVersion":2,"position":[2416,-288],"id":"441ff209-fbd3-438a-9c54-b962e090a6bd","name":"Alert discord","webhookId":"24990fec-b92a-4de4-9348-933779f8ebfe","retryOnFail":true,"waitBetweenTries":5000,"credentials":{"discordWebhookApi":{"id":"2oqKEjJqfEfwORxZ","name":"Discord Webhook social alerts"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[2192,-288],"id":"91203f22-d009-44cc-bffa-43ff8e957cdb","name":"Loop Over Items"},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{"clashHandling":{"values":{"resolveClash":"preferInput1","mergeMode":"shallowMerge"}}}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[2640,-368],"id":"842e3829-0bf8-4939-826f-c6c89c002bec","name":"Merge Reddit entity with discord response"},{"parameters":{"operation":"keys","keyPattern":"reddit_*"},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[-1840,720],"id":"caef4f09-c667-43b5-911b-a1df0802ac2f","name":"Get all reddit_* keys","credentials":{"redis":{"id":"AfgIqWjfLKZzroBz","name":"Redis db 1"}}},{"parameters":{"jsCode":"return Object.keys($input.first().json).map(k => {\n  return { json: { key: k } };\n});"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-1616,720],"id":"018a9e00-9c65-4496-b02d-08e3ab2530ae","name":"Extract keys"},{"parameters":{"operation":"delete","key":"={{ $json.key }}"},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[-1392,720],"id":"c4db9208-91ed-46a9-9bf6-5e1ef1cedc6f","name":"Delete extracted keys","credentials":{"redis":{"id":"AfgIqWjfLKZzroBz","name":"Redis db 1"}}},{"parameters":{"conditions":{"options":{"caseSensitive":false,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d21f2ff5-29dc-43ca-baf4-910f57688c06","leftValue":"={{ $json.created_utc.toDateTime('s') }}","rightValue":"={{ $now.format('yyyy-MM-dd').toDateTime().minus(1, \"weeks\").toUTC() }}","operator":{"type":"dateTime","operation":"afterOrEquals"}}],"combinator":"and"},"options":{"ignoreCase":true}},"type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[-1616,-176],"id":"897bacbe-ccc5-4cec-9617-88370ba13637","name":"Filter last week's posts"},{"parameters":{"conditions":{"options":{"caseSensitive":false,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"d21f2ff5-29dc-43ca-baf4-910f57688c06","leftValue":"={{ $json.created_utc.toDateTime('s') }}","rightValue":"={{ $now.format('yyyy-MM-dd').toDateTime().minus(4, \"weeks\").toUTC() }}","operator":{"type":"dateTime","operation":"afterOrEquals"}}],"combinator":"and"},"options":{"ignoreCase":true}},"type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[-1616,224],"id":"d8807f23-5fed-489c-863f-5d688bd4f5a5","name":"Filter last month's posts"},{"parameters":{"operation":"delete","key":"gemini_executions"},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[-2064,944],"id":"a219b5a1-6007-4532-b55b-f1efe9c09a87","name":"Manual Delete gemini_executions","credentials":{"redis":{"id":"AfgIqWjfLKZzroBz","name":"Redis db 1"}}},{"parameters":{"amount":1},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[3456,-288],"id":"54791293-4376-47a3-b190-db55ec4c227b","name":"Wait 1 second","webhookId":"3f30b243-cae7-43b3-9274-0f852e35b9dc"},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[176,-176],"id":"898cec65-4187-4d5b-846c-601bcae79732","name":"Merge comments and posts"},{"parameters":{"keys":{"key":[{"currentKey":"post_id","newKey":"id"}]},"additionalOptions":{}},"type":"n8n-nodes-base.renameKeys","typeVersion":1,"position":[-48,-176],"id":"e2fa5cc6-d888-4afa-8e28-4c2bc7c87169","name":"Rename post_id -> id"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"7cad6d4b-88fa-41fd-8b1c-49251513eb17","leftValue":"={{ $json.in_cache }}","rightValue":"=1","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"looseTypeValidation":true,"options":{}},"type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[848,-176],"id":"d8e74090-435d-4553-b843-48741676e302","name":"Hasn't been processed already"},{"parameters":{"operation":"get","propertyName":"in_cache","key":"=reddit_{{ $json.id }}","options":{}},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[400,-32],"id":"c333967a-1388-4c8d-8616-6654620f89ff","name":"Get cached ID","credentials":{"redis":{"id":"AfgIqWjfLKZzroBz","name":"Redis db 1"}}},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[624,-176],"id":"3f17ae39-9a6f-4b03-9d8e-35fef76d1738","name":"Merge cached response and entity"},{"parameters":{"content":"### 📝 Create a summary from the post/comment using Gemini 2.5 flash and fallback to llama3.2.","height":464,"width":800,"color":5},"type":"n8n-nodes-base.stickyNote","position":[2816,176],"typeVersion":1,"id":"9b6ec726-f53f-41ea-83e7-c59db3de2685","name":"Sticky Note"},{"parameters":{"content":"## 📨 Inform the Bunker team on Discord and save processed entities in the cache","height":400,"width":1488,"color":6},"type":"n8n-nodes-base.stickyNote","position":[2128,-528],"typeVersion":1,"id":"21bc4338-bcfb-4b76-942f-ec0865dcfd13","name":"Sticky Note2"},{"parameters":{"content":"## 💾 Filter already processed posts or comments.","height":368,"width":640,"color":3},"type":"n8n-nodes-base.stickyNote","position":[352,-240],"typeVersion":1,"id":"dd395863-c33a-4c58-8602-1c24a9a62536","name":"Sticky Note3"},{"parameters":{"operation":"set","key":"=reddit_{{ $json.id }}","value":"1","expire":true,"ttl":"={{ DateTime.fromSeconds(0).plus(1, \"week\").minus(1, 'hour').toSeconds() }}"},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[3056,-368],"id":"fe8f2567-ef74-483c-9553-38f671775569","name":"Save processed ID","credentials":{"redis":{"id":"AfgIqWjfLKZzroBz","name":"Redis db 1"}}},{"parameters":{"content":"## 🔍 If the post itself doesn't mention BunkerWeb, we fetch its comments that do.","height":352,"width":1072,"color":2},"type":"n8n-nodes-base.stickyNote","position":[-992,-32],"typeVersion":1,"id":"462db948-8a8a-47fa-990a-9a901af5dcda","name":"Sticky Note5"},{"parameters":{"sessionIdType":"customKey","sessionKey":"session_reddit"},"type":"@n8n/n8n-nodes-langchain.memoryRedisChat","typeVersion":1.5,"position":[3120,496],"id":"485a796c-69f9-4287-8c79-0a2cabaef960","name":"Redis","credentials":{"redis":{"id":"AfgIqWjfLKZzroBz","name":"Redis db 1"}}},{"parameters":{"query":"={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Query', ``, 'string') }}","options":{}},"type":"@tavily/n8n-nodes-tavily.tavilyTool","typeVersion":1,"position":[3248,496],"id":"fef3a490-7b86-400a-bb11-f3f9639237b6","name":"Tavily search","credentials":{"tavilyApi":{"id":"CpAx4VhG0PmKrOZR","name":"Tavily account - GitHub"}}},{"parameters":{"keys":{"key":[{"currentKey":"output","newKey":"summary"}]},"additionalOptions":{}},"type":"n8n-nodes-base.renameKeys","typeVersion":1,"position":[3456,400],"id":"b3678ae2-5d8c-4585-94d1-487d8122a33c","name":"Rename output -> summary"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"8152c702-f81c-471b-a7bc-33c4fedc9593","leftValue":"={{ (\n  ($json.post_body && $json.post_body !== \"null\" ? $json.post_body.length : 0) +\n  ($json.comment_body && $json.comment_body !== \"null\" ? $json.comment_body.length : 0)\n) }}","rightValue":1950,"operator":{"type":"number","operation":"lte"}}],"combinator":"and"},"looseTypeValidation":true,"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1072,-176],"id":"4d46f77c-1fa4-4740-b18f-5a7fe4a8400f","name":"If total is under 1950 chars"},{"parameters":{"model":"llama3.2:3b","options":{"lowVram":true,"useMLock":true,"useMMap":true}},"type":"@n8n/n8n-nodes-langchain.lmChatOllama","typeVersion":1,"position":[2992,496],"id":"a91d7035-5028-4ddb-9cb8-d7650e45a60b","name":"llama3.2","credentials":{"ollamaApi":{"id":"1LHuJ7liAjGaSUJT","name":"Ollama account"}}},{"parameters":{"assignments":{"assignments":[{"id":"98f3a811-a3d9-42b3-84cc-6c0f80a7aa9d","name":"summary","value":"={{ $json.comment_body ? `### [${$json.post_author}](<https://www.reddit.com/user/${$json.post_author}>) wrote:\\n${$json.post_body}` : $json.post_body }}{{ $json.comment_body ? `\\n---\\n### [${$json.comment_author}](<https://www.reddit.com/user/${$json.comment_author}>) replied with:\\n${$json.comment_body}` : \"\" }}","type":"string"}]},"includeOtherFields":true,"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1520,-192],"id":"9536ef23-4405-43ea-9753-d7253cb95fff","name":"post_body + comment_body -> summary"},{"parameters":{"promptType":"define","text":"=You are summarizing a Reddit post based on the provided JSON. You have access to **long-term memory** and the **Tavily search tool**. Use **Tavily carefully and only when essential** — specifically when a term, reference, or concept is **critical to understanding the post** and **cannot be inferred** from the JSON or your memory. Tavily queries are **limited**, so only use them when the information is important enough that leaving it out would reduce the clarity or value of the summary (e.g., unclear acronyms, niche technologies, real-world events, etc.).\n\n⚠️ **This summary is meant to help the creator of BunkerWeb stay informed about how their product is being discussed.**\n**Never use Tavily to look up anything related to BunkerWeb.** Always rely on the JSON content or your own memory when BunkerWeb is mentioned — the goal is to capture how users are talking about it, not to reinterpret or supplement their comments.\n\n---\n\n**Output Instructions (Must Follow Exactly):**\n\n1. Your entire output must be in **plain text** and stay **under 2000 characters**.\n\n2. Write a **main summary** of the post in **1–2 sentences**:\n\n   * The summary **must mention BunkerWeb** if it's referenced in any way.\n   * If both `comment_author` and `comment_body` are non-empty, explicitly state that you're summarizing the **original post**.\n   * If `nsfw` is `\"true\"`, append **(NSFW)** to the end of the summary.\n\n3. If both `comment_author` and `comment_body` are present:\n\n   * Add **exactly one blank line** after the main summary.\n   * Then write **one sentence** summarizing the **reply comment**, explicitly noting that **the original post did not mention BunkerWeb**, but the **comment did**.\n   * Mention the comment author only if it adds necessary context.\n\n4. Ignore extra whitespace and formatting issues. Treat multiple blank lines as paragraph breaks.\n\n5. Mention the **subreddit** or **post author** only if it adds crucial context.\n\n6. If any fields in the JSON are empty, `\"null\"`, or `\"undefined\"`, exclude them from the output entirely.\n\n---\n\n**Source Data Format:**\n\n```\n===== BEGIN META =====\nsubreddit: {{ $json.post_subreddit }}\nauthor: {{ $json.post_author }}\nnsfw: {{ $json.post_over_18 ? \"true\" : \"false\" }}\ncomment_author: {{ $json.comment_author }}\n===== END META =====\n\n===== BEGIN TEXT =====\ntitle: {{ $json.post_title }}\nbody:\n{{ $json.post_body }}\n===== END TEXT =====\n\n===== BEGIN COMMENT TEXT =====\ncomment_body:\n{{ $json.comment_body }}\n===== END COMMENT TEXT =====\n```","needsFallback":true,"options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":2.2,"position":[2992,272],"id":"cfebe4f7-ccb5-46e7-8ca1-33563fd8f4bb","name":"Agent summarizer"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[1296,352],"id":"c5c622f8-0124-4c2e-9ce2-deeda932a8e8","name":"Loop Over entities"},{"parameters":{"content":"## ⏳ Handle Gemini 2.5 flash API rate limit (10 requests per minute).","height":640,"width":1520,"color":4},"type":"n8n-nodes-base.stickyNote","position":[1264,16],"typeVersion":1,"id":"8c81a2e6-c09c-4cd7-873a-540abc44befe","name":"Sticky Note1"},{"parameters":{"amount":65},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[2192,128],"id":"5510845d-59b9-47fe-b90c-5bbc925f10a7","name":"Wait for the gemini API rate limit to end","webhookId":"19ce6afd-5f60-4e89-a7db-2fe2abd51c5a"},{"parameters":{"operation":"get","propertyName":"gemini_flash_executions","key":"gemini_flash_executions","options":{}},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[1520,416],"id":"faddea4c-acf9-4020-97d1-23c40db127e4","name":"Get gemini flash executions","credentials":{"redis":{"id":"AfgIqWjfLKZzroBz","name":"Redis db 1"}}},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1744,304],"id":"7f27b6e3-4907-432d-93fb-47ba54c03565","name":"Add gemini_flash_executions key"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"8152c702-f81c-471b-a7bc-33c4fedc9593","leftValue":"={{ $json.gemini_flash_executions }}","rightValue":10,"operator":{"type":"number","operation":"gte"}}],"combinator":"and"},"looseTypeValidation":true,"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1968,304],"id":"06c4920b-4104-4644-95e2-917487b040bf","name":"If there's been 10 executions or more"},{"parameters":{"operation":"delete","key":"gemini_flash_executions"},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[2416,64],"id":"e80d9bf8-6bd5-4e61-aeb8-5f7e6603c8e1","name":"Delete gemini_flash_executions","credentials":{"redis":{"id":"AfgIqWjfLKZzroBz","name":"Redis db 1"}}},{"parameters":{"operation":"incr","key":"gemini_flash_executions","expire":true,"ttl":65},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[2192,496],"id":"35078f4b-bbd4-45a1-aecd-467177297059","name":"Increment gemini_flash_executions","credentials":{"redis":{"id":"AfgIqWjfLKZzroBz","name":"Redis db 1"}}},{"parameters":{"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[2864,496],"id":"fba5548c-4c0a-4582-826c-a0e7a1b3799d","name":"Gemini 2.5 flash","credentials":{"googlePalmApi":{"id":"GNtLDT3w0YRmjHrT","name":"Gemini Api -  tdiot@bunkerity.com"}}},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[2416,416],"id":"1e51167a-949e-438f-a2d7-6e6556cf0906","name":"Merge increment"},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[2640,128],"id":"de0d8f90-c9bd-499a-a2a3-16a8aefae9a8","name":"Merge wait"},{"parameters":{},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[1744,-288],"id":"56ff8cb4-f907-4107-8407-ae1424b7cf98","name":"Merge all"}],"connections":{"Every day":{"main":[[{"node":"Search the last 100 posts containing the BunkerWeb keyword","type":"main","index":0}]]},"Clear processed IDs":{"main":[[{"node":"Get all reddit_* keys","type":"main","index":0}]]},"Get all comments in a post":{"main":[[{"node":"Extract comments from post","type":"main","index":0}]]},"Search the last 100 posts containing the BunkerWeb keyword":{"main":[[{"node":"Filter last week's posts","type":"main","index":0}]]},"Filter last year's posts":{"main":[[{"node":"Format post data","type":"main","index":0}]]},"If Contains BunkerWeb":{"main":[[{"node":"Rename post_id -> id","type":"main","index":0}],[{"node":"Get all comments in a post","type":"main","index":0},{"node":"Merge posts and comments","type":"main","index":0}]]},"Extract comments from post":{"main":[[{"node":"Merge posts and comments","type":"main","index":1}]]},"Sort by creation date":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Merge posts / comments":{"main":[[{"node":"Prefix comment ID","type":"main","index":0}]]},"Prefix comment ID":{"main":[[{"node":"Merge comments and posts","type":"main","index":1}]]},"Format post data":{"main":[[{"node":"If Contains BunkerWeb","type":"main","index":0}]]},"Merge posts and comments":{"main":[[{"node":"Merge posts / comments","type":"main","index":0}]]},"Merge summary":{"main":[[{"node":"Merge all","type":"main","index":0}]]},"Alert discord":{"main":[[{"node":"Merge Reddit entity with discord response","type":"main","index":1}]]},"Loop Over Items":{"main":[[],[{"node":"Merge Reddit entity with discord response","type":"main","index":0},{"node":"Alert discord","type":"main","index":0}]]},"Merge Reddit entity with discord response":{"main":[[{"node":"Save processed ID","type":"main","index":0}]]},"Get all reddit_* keys":{"main":[[{"node":"Extract keys","type":"main","index":0}]]},"Extract keys":{"main":[[{"node":"Delete extracted keys","type":"main","index":0}]]},"Filter last week's posts":{"main":[[{"node":"Format post data","type":"main","index":0}]]},"Filter last month's posts":{"main":[[{"node":"Format post data","type":"main","index":0}]]},"Wait 1 second":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Rename post_id -> id":{"main":[[{"node":"Merge comments and posts","type":"main","index":0}]]},"Merge comments and posts":{"main":[[{"node":"Get cached ID","type":"main","index":0},{"node":"Merge cached response and entity","type":"main","index":0}]]},"Get cached ID":{"main":[[{"node":"Merge cached response and entity","type":"main","index":1}]]},"Merge cached response and entity":{"main":[[{"node":"Hasn't been processed already","type":"main","index":0}]]},"Hasn't been processed already":{"main":[[{"node":"If total is under 1950 chars","type":"main","index":0}]]},"Save processed ID":{"main":[[{"node":"Wait 1 second","type":"main","index":0}]]},"Redis":{"ai_memory":[[{"node":"Agent summarizer","type":"ai_memory","index":0}]]},"Tavily search":{"ai_tool":[[{"node":"Agent summarizer","type":"ai_tool","index":0}]]},"Rename output -> summary":{"main":[[{"node":"Loop Over entities","type":"main","index":0}]]},"If total is under 1950 chars":{"main":[[{"node":"post_body + comment_body -> summary","type":"main","index":0}],[{"node":"Merge summary","type":"main","index":0},{"node":"Loop Over entities","type":"main","index":0}]]},"llama3.2":{"ai_languageModel":[[{"node":"Agent summarizer","type":"ai_languageModel","index":1}]]},"post_body + comment_body -> summary":{"main":[[{"node":"Merge all","type":"main","index":1}]]},"Agent summarizer":{"main":[[{"node":"Rename output -> summary","type":"main","index":0}]]},"Loop Over entities":{"main":[[{"node":"Merge summary","type":"main","index":1}],[{"node":"Get gemini flash executions","type":"main","index":0},{"node":"Add gemini_flash_executions key","type":"main","index":0}]]},"Wait for the gemini API rate limit to end":{"main":[[{"node":"Delete gemini_flash_executions","type":"main","index":0},{"node":"Merge wait","type":"main","index":1}]]},"Get gemini flash executions":{"main":[[{"node":"Add gemini_flash_executions key","type":"main","index":1}]]},"Add gemini_flash_executions key":{"main":[[{"node":"If there's been 10 executions or more","type":"main","index":0}]]},"If there's been 10 executions or more":{"main":[[{"node":"Wait for the gemini API rate limit to end","type":"main","index":0}],[{"node":"Increment gemini_flash_executions","type":"main","index":0},{"node":"Merge increment","type":"main","index":0}]]},"Gemini 2.5 flash":{"ai_languageModel":[[{"node":"Agent summarizer","type":"ai_languageModel","index":0}]]},"Increment gemini_flash_executions":{"main":[[{"node":"Merge increment","type":"main","index":1}]]},"Merge increment":{"main":[[{"node":"Agent summarizer","type":"main","index":0}]]},"Delete gemini_flash_executions":{"main":[[{"node":"Merge wait","type":"main","index":0}]]},"Merge wait":{"main":[[{"node":"Agent summarizer","type":"main","index":0}]]},"Merge all":{"main":[[{"node":"Sort by creation date","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Every day":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{"Every day":[{"json":{"timestamp":"2025-09-20T12:00:29.015+02:00","Readable date":"September 20th 2025, 12:00:29 pm","Readable time":"12:00:29 pm","Day of week":"Saturday","Year":"2025","Month":"September","Day of month":"20","Hour":"12","Minute":"00","Second":"29","Timezone":"Europe/Paris (UTC+02:00)"}}]},"versionId":"2e5ed52a-cf22-444d-8db1-61ac1710f4c8","triggerCount":1,"shared":[{"createdAt":"2025-09-15T15:10:15.425Z","updatedAt":"2025-09-15T15:10:15.425Z","role":"workflow:owner","workflowId":"PU5hf04BjrNWClfW","projectId":"ZjBkzD6jhnG4YX2d"}],"tags":[{"createdAt":"2025-08-13T09:13:48.874Z","updatedAt":"2025-08-13T09:13:48.874Z","id":"Af5V1Rr0ynGVFcvN","name":"Social"}]}