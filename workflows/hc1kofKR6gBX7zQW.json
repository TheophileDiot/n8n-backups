{"createdAt":"2025-08-22T17:16:39.767Z","updatedAt":"2025-09-22T07:20:47.911Z","id":"hc1kofKR6gBX7zQW","name":"Search BunkerWeb through Lobsters","active":true,"isArchived":false,"nodes":[{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"7cad6d4b-88fa-41fd-8b1c-49251513eb17","leftValue":"={{ $json.in_cache }}","rightValue":"=1","operator":{"type":"string","operation":"notEquals"}}],"combinator":"and"},"looseTypeValidation":true,"options":{}},"type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[-1328,-504],"id":"64f82864-ef14-4699-adbb-c0748b191aa9","name":"Hasn't been processed already"},{"parameters":{"operation":"get","propertyName":"in_cache","key":"=lobster_{{ $json.id }}","options":{}},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[-1776,-432],"id":"fa5bc5bf-98a2-4d3a-a42a-02e868c9be58","name":"Get cached ID","credentials":{"redis":{"id":"AfgIqWjfLKZzroBz","name":"Redis db 1"}}},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[-1552,-504],"id":"7328661a-f606-4ac8-b071-a74c0c4fb7be","name":"Merge cached response and entity"},{"parameters":{"content":"## ðŸ’¾ Filter already processed statuses.","height":352,"width":640,"color":3},"type":"n8n-nodes-base.stickyNote","position":[-1824,-624],"typeVersion":1,"id":"a389b77e-39cb-41fa-b932-52d326f7a772","name":"Sticky Note3"},{"parameters":{"sortFieldsUi":{"sortField":[{"fieldName":"created_at"}]},"options":{}},"type":"n8n-nodes-base.sort","typeVersion":1,"position":[-656,-504],"id":"6eb9a3d2-e0c7-42ce-b1ae-872b3ef400fc","name":"Sort by creation date"},{"parameters":{"authentication":"webhook","options":{"wait":true},"embeds":{"values":[{"description":"={{ $json.title }}\nsource: {{ $json.url }}","author":"={{ $json.author }}","color":"#5b0000","timestamp":"={{ $json.created_at }}","title":"ðŸ¦ž New Lobster hit!","url":"={{ $json.short_url }}"}]}},"type":"n8n-nodes-base.discord","typeVersion":2,"position":[-208,-504],"id":"ef7a3a25-fcb4-46c6-80bd-dc29e38ccb2f","name":"Alert discord","webhookId":"c94daccb-0793-4de6-a870-f297268f4c46","retryOnFail":true,"waitBetweenTries":5000,"credentials":{"discordWebhookApi":{"id":"2oqKEjJqfEfwORxZ","name":"Discord Webhook social alerts"}}},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[-432,-504],"id":"8518117c-cad8-4d71-9120-49e94bfbd567","name":"Loop Over Items"},{"parameters":{"amount":1},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[464,-504],"id":"4d3cbea5-dd58-4e52-a1a6-acb938eb850d","name":"Wait 1 second","webhookId":"f7dbd5e8-2c97-47e2-8d77-0e79003f3ed6"},{"parameters":{"content":"## ðŸ“¨ Inform the Bunker team on Discord and save processed entities in the cache","height":352,"width":1136,"color":6},"type":"n8n-nodes-base.stickyNote","position":[-504,-696],"typeVersion":1,"id":"b39ab38b-b9fd-4e98-b35e-ace202ed1cfd","name":"Sticky Note2"},{"parameters":{"operation":"set","key":"=lobster_{{ $json.id }}","value":"1","expire":true,"ttl":"={{ DateTime.fromSeconds(0).plus(1, \"month\").toSeconds() }}"},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[240,-576],"id":"b00081f5-9509-420c-b690-db203223f4b5","name":"Save processed ID","credentials":{"redis":{"id":"AfgIqWjfLKZzroBz","name":"Redis db 1"}}},{"parameters":{"assignments":{"assignments":[{"id":"955d62d6-8516-4ba3-85ff-1c9d16cc679c","name":"created_at","value":"={{ DateTime.fromISO($json.created_at) }}","type":"string"}]},"includeOtherFields":true,"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1104,-504],"id":"333618a1-d8dc-43a6-b316-1c35994ce462","name":"Convert date string to datetime"},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{"clashHandling":{"values":{"resolveClash":"preferInput1"}}}},"type":"n8n-nodes-base.merge","typeVersion":3.2,"position":[16,-576],"id":"8afb5fb0-e1e7-430e-92c2-5daca671301d","name":"Merge tweet data with discord response"},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-2448,-208],"id":"ec0cf500-c501-45f0-9b8b-adc9d9227fe0","name":"Clear processed IDs"},{"parameters":{"jsCode":"return Object.keys($input.first().json).map(k => {\n  return { json: { key: k } };\n});"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2000,-208],"id":"3640a4dc-d426-4b7c-8d63-9d67f9f83ab9","name":"Extract keys"},{"parameters":{"operation":"delete","key":"={{ $json.key }}"},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[-1776,-208],"id":"38b14ff3-d0b2-4a0f-b304-fff50d879690","name":"Delete extracted keys","credentials":{"redis":{"id":"AfgIqWjfLKZzroBz","name":"Redis db 1"}}},{"parameters":{"rule":{"interval":[{"field":"hours"}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-2448,-504],"id":"53ee7ecf-885c-4946-8518-4b2f365178ae","name":"Every hour"},{"parameters":{"operation":"keys","keyPattern":"lobster_*"},"type":"n8n-nodes-base.redis","typeVersion":1,"position":[-2224,-208],"id":"ce85360c-e810-41a7-8a87-c807771787a3","name":"Get all lobster_* keys","credentials":{"redis":{"id":"AfgIqWjfLKZzroBz","name":"Redis db 1"}}},{"parameters":{"url":"https://lobste.rs/search","sendQuery":true,"queryParameters":{"parameters":[{"name":"q","value":"\"BunkerWeb\""},{"name":"order","value":"newest"},{"name":"what","value":"stories"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2224,-504],"id":"e6344564-38ec-4c6a-8021-982462dc6502","name":"Search BunkerWeb in Lobsters"},{"parameters":{"jsCode":"// n8n Code node â€” robust Lobsters search HTML parser\n\nfunction getHtml(item) {\n  const j = item.json ?? item;\n  if (typeof j === 'string') return j;\n  if (typeof j?.body === 'string') return j.body;\n  if (typeof j?.data === 'string') return j.data;\n  throw new Error('No HTML string found (expected raw string, json.body, or json.data)');\n}\n\nfunction decodeEntities(str = '') {\n  return str\n    .replace(/&amp;/g, '&').replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>').replace(/&quot;/g, '\"')\n    .replace(/&#39;/g, \"'\");\n}\nfunction stripTags(s = '') { return s.replace(/<[^>]*>/g, ''); }\nfunction textify(s = '') { return decodeEntities(stripTags(s)).trim(); }\n\nfunction firstMatch(re, s) { const m = re.exec(s); return m ? m[1] : null; }\nfunction allMatches(re, s) { const out=[]; let m; while ((m = re.exec(s))) out.push(m[1]); return out; }\n\nfunction toIso(dt) {\n  if (!dt) return null;\n  // Accept \"YYYY-MM-DD HH:mm:ssÂ±HHMM\" â†’ convert to \"YYYY-MM-DDTHH:mm:ssÂ±HH:MM\"\n  const m = /^(\\d{4}-\\d{2}-\\d{2})[ T](\\d{2}:\\d{2}:\\d{2})([+-]\\d{2})(\\d{2})$/.exec(dt);\n  if (m) return `${m[1]}T${m[2]}${m[3]}:${m[4]}`;\n  try { return new Date(dt).toISOString(); } catch { return dt; }\n}\n\nconst BASE = 'https://lobste.rs';\nconst out = [];\n\nfor (const item of $input.all()) {\n  const html = getHtml(item);\n\n  // Match each story including its opening <li ...> tag\n  const reStory = /(<li[^>]*class=\"[^\"]*\\bstory\\b[^\"]*\"[^>]*>)([\\s\\S]*?)<\\/li>/gi;\n  let m;\n  while ((m = reStory.exec(html))) {\n    const openTag = m[1];\n    const block = m[2];\n\n    // id from opening tag\n    let id = firstMatch(/data-shortid=\"([^\"]+)\"/i, openTag);\n\n    // title + url\n    const urlHref = firstMatch(/<a[^>]*class=\"[^\"]*\\bu-url\\b[^\"]*\"[^>]*href=\"([^\"]+)\"/i, block);\n    const titleHtml = firstMatch(/<a[^>]*class=\"[^\"]*\\bu-url\\b[^\"]*\"[^>]*>([\\s\\S]*?)<\\/a>/i, block);\n    const title = textify(titleHtml);\n\n    // domain\n    const domain = textify(firstMatch(/<a[^>]*class=\"[^\"]*\\bdomain\\b[^\"]*\"[^>]*>([\\s\\S]*?)<\\/a>/i, block));\n\n    // points (support either <a class=\"upvoter\">15</a> or <span class=\"score\">15</span>)\n    let points = parseInt(firstMatch(/<a[^>]*class=\"[^\"]*\\bupvoter\\b[^\"]*\"[^>]*>(\\d+)<\\/a>/i, block) ?? 'NaN', 10);\n    if (!Number.isFinite(points)) {\n      points = parseInt(firstMatch(/<span[^>]*class=\"[^\"]*\\bscore\\b[^\"]*\"[^>]*>(\\d+)<\\/span>/i, block) ?? '0', 10);\n    }\n\n    // author\n    const author = textify(firstMatch(/<a[^>]*class=\"[^\"]*\\bu-author\\b[^\"]*\"[^>]*>([\\s\\S]*?)<\\/a>/i, block));\n\n    // created_at\n    const createdAtRaw = firstMatch(/<time[^>]*datetime=\"([^\"]+)\"/i, block);\n    const created_at = toIso(createdAtRaw);\n\n    // comments link & count\n    const commentsHref = firstMatch(/<span[^>]*class=\"comments_label\"[^>]*>[\\s\\S]*?<a[^>]*href=\"([^\"]+)\"/i, block);\n    const commentsText = textify(firstMatch(/<span[^>]*class=\"comments_label\"[^>]*>[\\s\\S]*?<a[^>]*>([\\s\\S]*?)<\\/a>/i, block) || '');\n    const comments = /^\\d+/.test(commentsText) ? parseInt(commentsText, 10) : 0;\n\n    // tags\n    const tags = allMatches(/<a[^>]*class=\"[^\"]*\\btag\\b[^\"]*\"[^>]*>([\\s\\S]*?)<\\/a>/gi, block).map(textify);\n\n    // discussion & short URLs\n    const discussion_url = commentsHref\n      ? (commentsHref.startsWith('http') ? commentsHref : BASE + commentsHref)\n      : (id ? `${BASE}/s/${id}` : null);\n\n    // If id missing in opening tag, try to derive from discussion URL (/s/<id>/...)\n    if (!id) id = firstMatch(/\\/s\\/([a-z0-9]+)(?:\\/|$)/i, discussion_url || '');\n\n    const short_url = id ? `${BASE}/s/${id}` : null;\n\n    // primary URL (self posts link to discussion)\n    const is_self = !urlHref || urlHref.startsWith('/s/') || urlHref.startsWith('#');\n    const url = is_self ? (discussion_url || short_url) : urlHref;\n\n    out.push({\n      json: {\n        id,\n        title: title || null,\n        url: url || null,\n        short_url,\n        discussion_url,\n        domain: domain || null,\n        points,\n        author: author || null,\n        created_at,\n        comments,\n        tags,\n        is_self\n      }\n    });\n  }\n}\n\nreturn out;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-2000,-504],"id":"d57bc1d2-d31e-42da-b9fb-4d411f11ae16","name":"Parse HTML"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"6c92d84b-d044-4b44-82ec-f1a50f31ebaa","leftValue":"={{ $json.created_at }}","rightValue":"={{ $now.minus('1', 'day') }}","operator":{"type":"dateTime","operation":"afterOrEquals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[-880,-504],"id":"b4aeb16c-1eeb-425a-8fcf-f03b4e0c8550","name":"Created in the last 24H"}],"connections":{"Hasn't been processed already":{"main":[[{"node":"Convert date string to datetime","type":"main","index":0}]]},"Get cached ID":{"main":[[{"node":"Merge cached response and entity","type":"main","index":1}]]},"Merge cached response and entity":{"main":[[{"node":"Hasn't been processed already","type":"main","index":0}]]},"Alert discord":{"main":[[{"node":"Merge tweet data with discord response","type":"main","index":1}]]},"Loop Over Items":{"main":[[],[{"node":"Merge tweet data with discord response","type":"main","index":0},{"node":"Alert discord","type":"main","index":0}]]},"Wait 1 second":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Save processed ID":{"main":[[{"node":"Wait 1 second","type":"main","index":0}]]},"Convert date string to datetime":{"main":[[{"node":"Created in the last 24H","type":"main","index":0}]]},"Merge tweet data with discord response":{"main":[[{"node":"Save processed ID","type":"main","index":0}]]},"Clear processed IDs":{"main":[[{"node":"Get all lobster_* keys","type":"main","index":0}]]},"Extract keys":{"main":[[{"node":"Delete extracted keys","type":"main","index":0}]]},"Every hour":{"main":[[{"node":"Search BunkerWeb in Lobsters","type":"main","index":0}]]},"Get all lobster_* keys":{"main":[[{"node":"Extract keys","type":"main","index":0}]]},"Search BunkerWeb in Lobsters":{"main":[[{"node":"Parse HTML","type":"main","index":0}]]},"Parse HTML":{"main":[[{"node":"Get cached ID","type":"main","index":0},{"node":"Merge cached response and entity","type":"main","index":0}]]},"Sort by creation date":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Created in the last 24H":{"main":[[{"node":"Sort by creation date","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Every day":{"recurrenceRules":[]},"node:Every hour":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"ca1ae263-c1c5-43d9-ad1a-a8eb4180ba1a","triggerCount":1,"shared":[{"createdAt":"2025-09-15T15:10:15.425Z","updatedAt":"2025-09-15T15:10:15.425Z","role":"workflow:owner","workflowId":"hc1kofKR6gBX7zQW","projectId":"ZjBkzD6jhnG4YX2d"}],"tags":[{"createdAt":"2025-08-13T09:13:48.874Z","updatedAt":"2025-08-13T09:13:48.874Z","id":"Af5V1Rr0ynGVFcvN","name":"Social"}]}